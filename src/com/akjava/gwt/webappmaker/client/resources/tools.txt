package ${package};

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;

import com.akjava.lib.common.param.Parameter;
import com.akjava.lib.common.param.ParameterUtils;
import com.akjava.lib.common.tag.LabelAndValue;
import com.akjava.lib.common.tag.Tag;
import com.akjava.lib.common.tag.TagBuilder;

import com.akjava.lib.common.form.Modifiers;
import com.akjava.lib.common.functions.LabelAndValueDto;
import com.akjava.lib.common.utils.HTMLUtils;
import com.akjava.lib.common.utils.TemplateUtils;
import com.akjava.lib.common.utils.ValuesUtils;
import com.google.common.base.Joiner;
import javax.servlet.http.HttpServletRequest;
import javax.jdo.PersistenceManager;
import javax.jdo.Query;
import javax.cache.Cache;
import javax.cache.CacheException;
import javax.cache.CacheFactory;
import javax.cache.CacheManager;
import com.google.appengine.api.memcache.jsr107cache.GCacheFactory;




public class  ${dataClassName}Tools  {
public static SimpleDateFormat dateFormat=new SimpleDateFormat("${dateFormat}");
public static String MULTI_VALUE_SEPARATOR="\t";
public static final String MESSAGE_HAS_ERROR="${message_has_error}";
/** not use
public static Map<String,String> toLabelMap(${dataClassName}Entity entity){
	Map<String,String> map=${dataClassName}EntityDto.entityToMap(entity);
	${toLabelMap}
	return map;
}
*/

public static void insertFormField(Map<String,String> map){
${insertFormField}
}

public static List<LabelAndValue> getLabelAndValue(String key){
	${getLabelAndValue}
	return null;
}

public static List<String> getKeyLists(){
		List<String> list=new ArrayList<String>();
${getKeyLists}
		return list;
	}
	
		public static boolean isMultipleParameter(String key){
		${isMultipleParameter}
		return false;
	}
		public static String multiValueToSingle(HttpServletRequest request,String key){
		String[] values=request.getParameterValues(key);
		if(values==null){
			return null;
		}
		return Joiner.on(MULTI_VALUE_SEPARATOR).join(request.getParameterValues(key));
	}
		public static Map<String,String> requestToMap(HttpServletRequest request){
		Map<String,String> map=new HashMap<String, String>();
		for(String key:getKeyLists()){
			String value=null;
			if(isMultipleParameter(key)){
				value=multiValueToSingle(request,key);
			}else{
				value=request.getParameter(key);
			}
			if(value!=null){
				value=${dataClassName}Modifier.modifyValue(key, value);
				map.put(key,value );
			}
		}
		return map;
	}
	
	public static String toValueValue(String key,String value){
		return HTMLUtils.sanitizeQuot(value);
	}
	//same name
	public static String toLabelValue(String key,String value){
			${toLabelValue}
		return value;
	}
	
	public static Map<String,String> toValueAndLabelMap(${dataClassName}Entity entity){
		Map<String,String> values=new HashMap<String, String>();
		
		Map<String,String> valueMap=${dataClassName}EntityDto.entityToMap(entity);
		for(String key:valueMap.keySet()){
			String raw=valueMap.get(key);
			values.put("label_"+key, toLabelValue(key, raw));
			values.put("value_"+key, toValueValue(key,raw));
			values.put(key,raw);//need raw some case?because value is encoded for html
		}
		
		return values;
	}

@SuppressWarnings("unchecked")
	private static void initCache() {
		CacheFactory cacheFactory;
		if(cache==null){//re create cache
		try {
			@SuppressWarnings("rawtypes")
			Map props = new HashMap();
			props.put(GCacheFactory.EXPIRATION_DELTA, DEFAULT_CACHE_AGE);// 3minute
			cacheFactory = CacheManager.getInstance().getCacheFactory();
			cache = cacheFactory.createCache(props);
		} catch (CacheException e) {
			e.printStackTrace();
		}
		}
	}
	
public static volatile Cache cache;
	public static int DEFAULT_CACHE_AGE=60*60*24;//1day
	public static String CACHE_KEY="cache_map_${dataClassName}";
	public static void clearCacheMap(){
		cache.remove(CACHE_KEY);
	}
	@SuppressWarnings("unchecked")
	public static void putCacheMapValue(String key,String value){
		Map<String,String> map=((Map<String, String>) cache.get(CACHE_KEY));
		if(map==null){
			map=new HashMap<String, String>();
		}
		map.put(key, value);
		cache.put(CACHE_KEY, map);
	}
	public static Map<String,String> getCacheMap(){
		initCache();
		@SuppressWarnings("unchecked")
		Map<String,String> map=((Map<String, String>) cache.get(CACHE_KEY));
		if(map==null){
			return new HashMap<String, String>();
		}else{
			return map;
		}
	}
}
package ${package};

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;

import com.akjava.lib.common.form.Modifiers;
import com.akjava.lib.common.utils.HTMLUtils;
import com.akjava.lib.common.utils.TemplateUtils;
import com.google.common.base.Joiner;
import javax.servlet.http.HttpServletRequest;






public class  ${dataClassName}Tools  {
public static SimpleDateFormat dateFormat=new SimpleDateFormat("${dateFormat}");
public static String MULTI_VALUE_SEPARATOR="\t";

/** not use
public static Map<String,String> toLabelMap(${dataClassName}Entity entity){
	Map<String,String> map=${dataClassName}EntityDto.entityToMap(entity);
	${toLabelMap}
	return map;
}
*/

public static List<String> getKeyLists(){
		List<String> list=new ArrayList<String>();
${getKeyLists}
		return list;
	}
	
		public static boolean isMultipleParameter(String key){
		${isMultipleParameter}
		return false;
	}
		public static String multiValueToSingle(HttpServletRequest request,String key){
		String[] values=request.getParameterValues(key);
		if(values==null){
			return null;
		}
		return Joiner.on(MULTI_VALUE_SEPARATOR).join(request.getParameterValues(key));
	}
		public static Map<String,String> requestToMap(HttpServletRequest request){
		Map<String,String> map=new HashMap<String, String>();
		for(String key:getKeyLists()){
			String value=null;
			if(isMultipleParameter(key)){
				value=multiValueToSingle(request,key);
			}else{
				value=request.getParameter(key);
			}
			if(value!=null){
				value=${dataClassName}Modifier.modifyValue(key, value);
				map.put(key,value );
			}
		}
		return map;
	}
	
	public static String toValueValue(String key,String value){
		return HTMLUtils.sanitizeQuot(value);
	}
	//same name
	public static String toLabelValue(String key,String value){
			${toLabelValue}
		return value;
	}
	
	public static Map<String,String> toValueAndLabelMap(${dataClassName}Entity entity){
		Map<String,String> values=new HashMap<String, String>();
		
		Map<String,String> valueMap=${dataClassName}EntityDto.entityToMap(entity);
		for(String key:valueMap.keySet()){
			String raw=valueMap.get(key);
			values.put("label_"+key, toLabelValue(key, raw));
			values.put("value_"+key, toValueValue(key,raw));
			values.put(key,raw);//need raw some case?because value is encoded for html
		}
		
		return values;
	}

}
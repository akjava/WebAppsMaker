package ${package};

import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import com.akjava.lib.common.form.StaticValidators;
import com.akjava.lib.common.form.Validator;
import com.akjava.lib.common.form.Validators;
import com.akjava.lib.common.form.ValidatorTools;
import com.akjava.lib.common.form.ValidatorTools.ValidatorNotFoundException;

import com.akjava.lib.common.utils.HTMLUtils;
import com.akjava.lib.common.utils.TemplateUtils;
import com.google.common.collect.LinkedHashMultimap;

public class ${dataClassName}Validator {

	private static Validator notEmpty=StaticValidators.notEmptyValidator();
	private static Validator less1Mbytes=Validators.maxStringByteSize(1024*1024);
	private static Validator less500words=Validators.maxStringSize(500);
	private static Validator hiragana=StaticValidators.hiragana();
	private static Validator ascii=StaticValidators.asciiNumberAndCharOnly();
	
	
	public static Map<String,String> createAddKeyLabelMap(){
		Map<String,String> keyLabelMap=new LinkedHashMap<String, String>();
		
		${createAddKeyLabelMap}
		
		return keyLabelMap;
	}
	
	public static Map<String,String> createEditKeyLabelMap(){
		Map<String,String> keyLabelMap=new LinkedHashMap<String, String>();
		
		${createEditKeyLabelMap}
		
		return keyLabelMap;
	}
	
	
private static Map<String,String> errorTextMap;

private static void initializeErrorTextMap(){
	if(errorTextMap==null){//TODO support english
		errorTextMap=new HashMap<String, String>();
		errorTextMap.put(notEmpty.getName(), "${value}は必須項目");
		errorTextMap.put(less500words.getName(), "${value}は500文字以内");
		errorTextMap.put(hiragana.getName(), "${value}は平仮名のみ");
		errorTextMap.put(ascii.getName(), "${value}は半角英数字のみ");
		errorTextMap.put(less1Mbytes.getName(), "テキストの文字数オーバー ${value}は1Mbyte以内");
	}
}
/**
 * 
 * @param keyLabelMap
 * used for validate and parse target ,and when has error use label 
 * @param validators
 * @param dataMap
 * @param errorMap
 * @param request
 */
public static void validateValue(Map<String,String> keyLabelMap,LinkedHashMultimap<String, Validator> validators,Map<String,String> dataMap,Map<String,String> errorMap,HttpServletRequest request){


		initializeErrorTextMap();
		
		
		for(String key:keyLabelMap.keySet()){
			dataMap.put("error_"+key, "");//initial clear
			
			
			String value=dataMap.get(key);
			
			if(value==null){
				value="";
			}
			
			//TODO validate support multi value
			for(Validator validator:validators.get(key)){
				if(!validator.validate(value)){
					//FUTURE convert multimap,so this means mulitiple works only noempty
					errorMap.put("error_"+key, TemplateUtils.createText(errorTextMap.get(validator.getName()), keyLabelMap.get(key)));
				}
			}
			
			//for value
			dataMap.put("value_"+key, ${dataClassName}Tools.toValueValue(key,value));
			
			//for label
			dataMap.put("label_"+key, ${dataClassName}Tools.toLabelValue(key,value));
			
		}
		
	}

public static LinkedHashMultimap<String, Validator> createDataValidator(){
	LinkedHashMultimap<String, Validator> validators=LinkedHashMultimap.create();
	try{
	${createDataValidator}
	}catch(Exception e){
	e.printStackTrace();
	}
	return validators;
}

}

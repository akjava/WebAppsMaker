package  ${package};

import java.io.IOException;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.akjava.servlet.AbstractSimpleTemplateServlet;
import com.akjava.servlet.SimpleTemplateUtils;
import ${basePackage}*;



public class  ${className}  extends  AbstractSimpleTemplateServlet{
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	@Override
	protected String initializeHtmlTitle() {
		return "${title}";
	}

	@Override
	protected String initializeBaseTemplateHtmlName() {
		return "${baseTemplate}";
	}

	@Override
	protected String initializeMainTemplateHtmlName() {
		return "${mainTemplate}";
	}
	@Override
	protected boolean initializeUseCache() {
		return ${useCache};
	}

	protected String createMainHtml(HttpServletRequest request, HttpServletResponse response)throws ServletException, IOException {
		String id=request.getParameter("${firstKey}");
		if(id==null){
			id="";
		}
		if(key.isEmpty()){
			response.sendError(500, "empty ${firstKey}");
			return null;
		}
		try{
		${dataClassName}Entity q=null;
		try {
			Long keyValue=Long.parseLong(id);//TODO switch by type
			q = new ${dataClassName}EntityDao(PMF.get().getPersistenceManager()).getData(keyValue);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		if(q!=null){
			dataMap=${dataClassName}Tools.toValueAndLabelMap(q);
			
			
			
		}else{
			response.sendError(500, "id not found");
			return null;
		}
		
		
		String dataHtml=SimpleTemplateUtils.createTextFromFile(getServletContext(), mainTemplateHtmlName, dataMap);
		return dataHtml;
		}catch (javax.jdo.JDOObjectNotFoundException e) {
			response.sendError(505, "Not Found,removed or System erro");
			return null;
		}
	}
}